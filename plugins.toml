[[plugins]]
repo = 'Shougo/dein.vim'

# gruvbox {{{
[[plugins]]
repo = 'morhetz/gruvbox'
hook_add = '''
    let g:gruvbox_termcolors=256
    let g:gruvbox_contrast_dark="hard"
    let g:gruvbox_vert_split="bg0"
'''
# }}}

# vim-airline (status and tabline) {{{
[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
    let g:airline_extensions = ['tabline', 'quickfix', 'branch']
    let g:airline#extensions#tabline#enabled = 1

    " show the airline_tab type is tab or buffer (top right)
    let g:airline#extensions#tabline#show_tab_type = 1

    " close symbol (top right)
    let g:airline#extensions#tabline#close_symbol = 'X'

    " enable displaying buffers with a single tab
    " it mean airline_tab type is buffer
    let g:airline#extensions#tabline#show_buffers = 1
    " Show the buffer order with a single tab
    " convient to use <leader>n to switch buffer
    let g:airline#extensions#tabline#buffer_idx_mode = 1

    " if airline_tab type is tab
    " convient to use <leader>n to switch tap
    let g:airline#extensions#tabline#tab_nr_type = 1

    " disable show split information on top right
    let g:airline#extensions#tabline#show_splits = 0

    nmap <leader>1 <Plug>AirlineSelectTab1
    nmap <leader>2 <Plug>AirlineSelectTab2
    nmap <leader>3 <Plug>AirlineSelectTab3
    nmap <leader>4 <Plug>AirlineSelectTab4
    nmap <leader>5 <Plug>AirlineSelectTab5
    nmap <leader>6 <Plug>AirlineSelectTab6
    nmap <leader>7 <Plug>AirlineSelectTab7
    nmap <leader>8 <Plug>AirlineSelectTab8
    nmap <leader>9 <Plug>AirlineSelectTab9
'''
[[plugins]]
repo = 'vim-airline/vim-airline-themes'
# }}}

# vim-cursorword (underline the word under the cursor) {{{
[[plugins]]
repo = 'itchyny/vim-cursorword'
# }}}

# vim-indent-guides (display indentions levels) {{{
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
    let g:indent_guides_enable_on_vim_startup = 1
    let g:indent_guides_exclude_filetypes = ['help', 'nerdtree', 'diff']
'''
# }}}

# rainbow (rainbow parenthethese) {{{
[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = '''
    let g:rainbow_active = 1
'''
# }}}

# vim dispatch (async build and test) {{{
[[plugins]]
repo = 'tpope/vim-dispatch'
# }}}

# gen_tags (ctags/gtags) {{{
[[plugins]]
repo = 'jsfaint/gen_tags.vim'
hook_add = '''
    let  g:gen_tags#gtags_default_map = 1
'''
# }}}

# vim-unimpaired (pairs of handy bracket mappings) {{{
[[plugins]]
repo = 'tpope/vim-unimpaired'
# }}}

# context_filetype (context filetype library for Vim script) {{{
[[plugins]]
repo = 'Shougo/context_filetype.vim'
# }}}

# vim-precious (auto change filetype in code block) {{{
[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']
hook_add = '''
    let g:precious_enable_switchers = {'*': {'setfiletype': 1}, 'nerdtree': {'setfiletype': 0}}
'''
# }}}

# vim text object {{{

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'glts/vim-textobj-comment'

[[plugins]]
repo = 'sgur/vim-textobj-parameter'
# }}}

# vim-commentary {{{
[[plugins]]
repo = 'tpope/vim-commentary'
hook_add = '''
'''
# }}}

# vim operator {{{
[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'kana/vim-operator-replace'
depends = 'vim-operator-user'
hook_add = '''
  map R <Plug>(operator-replace)
'''
# }}}

# matchup (% enhancement) {{{
[[plugins]]
repo = 'andymass/vim-matchup'
hook_add = '''
    let g:matchup_matchparen_enabled = 1
    let g:matchup_surround_enabled = 1
    let g:matchup_matchparen_offscreen = {'method': 'popup'}
    let g:matchup_transmute_enabled = 1

    let g:matchup_matchpref = {
                \ 'html': { 'tagnameonly': 1}
                \ }
'''
# }}}

# vim-scriptease {{{
[[plugins]]
repo = 'tpope/vim-scriptease'
# }}}

# vim-fugitive (git wrapper) {{{
[[plugins]]
repo = 'tpope/vim-fugitive'
# }}}

# fzf fuzzy finder {{{
[[plugins]]
repo = 'junegunn/fzf.vim'
depends = 'fzf'
hook_source = '''
    exe 'source' $NVIMRC.'/config/fzf.vim'
'''

[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'
merged = 0
# }}}

# completion-nvim {{{
[[plugins]]
repo = 'nvim-lua/completion-nvim'
merged = 0
hook_add = '''
    autocmd BufEnter * lua require'completion'.on_attach()
    let g:completion_enable_auto_popup = 0
    let g:completion_enable_auto_signature = 1
    let g:completion_timer_cycle = 200
    let g:completion_matching_strategy_list = ['exact']
    let g:completion_enable_snippet = 'vim-vsnip'
    let g:completion_chain_complete_list = [
        \{'complete_items': ['lsp', 'snippet', 'buffers']},
        \{'mode': '<c-p>'},
        \{'mode': '<c-n>'}
    \]
    let g:completion_confirm_key = "\<C-y>"
'''
hook_source = '''
    exe 'source' $NVIMRC.'/config/completion_nvim.vim'
'''

[[plugins]]
repo = 'steelsojka/completion-buffers'
merged = 0

[[plugins]]
repo = 'hrsh7th/vim-vsnip'

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'
# }}}

# nvim-lsp related plugin {{{
[[plugins]]
repo = 'neovim/nvim-lsp'
merged = 0
hook_source = '''
lua << EOF
    local nvim_lsp = require'nvim_lsp'
    local on_attach_vim = function()
      require'completion'.on_attach()
      require'diagnostic'.on_attach()
    end
    nvim_lsp.gopls.setup{
        init_options= { usePlaceholders = true },
        on_attach=on_attach_vim
    }
EOF
'''

[[plugins]]
repo = 'nvim-lua/diagnostic-nvim'
merged = 0
hook_add = '''
    let g:diagnostic_show_sign = 1
    let g:diagnostic_enable_virtual_text = 1
    let g:diagnostic_insert_delay = 1
    let g:diagnostic_virtual_text_prefix = '<'
'''
hook_source = '''
call sign_define("LspDiagnosticsErrorSign", {"text" : "✖", "texthl" : "GruvboxRedSign"})
call sign_define("LspDiagnosticsWarningSign", {"text" : "‼", "texthl" : "GruvboxOrangeSign"})
call sign_define("LspDiagnosticsInformationSign", {"text" : "ℹ", "texthl" : "GruvboxGreeSign"})
call sign_define("LspDiagnosticsHintSign", {"text" : "➤", "texthl" : "GruvboxGreeSign"})

'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
merged = 0
hook_source = '''
lua <<EOF
require'nvim-treesitter.configs'.setup {
    ensure_installed = "all",
    highlight = {
        enable = true
    },
    incremental_selection = {
        enable = false,
    },
    refactor = {
        highlight_definitions = { enable = true },
        highlight_current_scope = { enable = false },
        smart_rename = { enable = false },
        navigation = { enable = false }
    },
    textobjects = {
        select = {
            enable = true,
                keymaps = {
                    ["af"] = "@function.outer",
                    ["ic"] = "@class.inner"
                }
        },
        swap = { enable = false },
        move = { enable = false }
    }
}
EOF
'''
# }}}

# " vim: set foldmethod=marker tw=80 sw=4 ts=4 sts =4 sta nowrap et :
