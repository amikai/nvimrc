[[plugins]]
repo = 'Shougo/dein.vim'

# gruvbox {{{
[[plugins]]
repo = 'morhetz/gruvbox'
hook_add = '''
    " need to set background
    let g:gruvbox_termcolors=256
    let g:gruvbox_contrast_dark="hard"
    let g:gruvbox_vert_split="bg0"
    set bg=dark
    colorscheme gruvbox
    autocmd MyAutoCmd VimEnter * nested set bg=dark | colorscheme gruvbox
'''
# }}}

# vim-airline (status and tabline) {{{
[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
    let g:airline#extensions#tabline#enabled = 1

    " show the airline_tab type is tab or buffer (top right)
    let g:airline#extensions#tabline#show_tab_type = 1

    " close symbol (top right)
    let g:airline#extensions#tabline#close_symbol = 'X'

    " enable displaying buffers with a single tab
    " it mean airline_tab type is buffer
    let g:airline#extensions#tabline#show_buffers = 1
    " Show the buffer order with a single tab
    " convient to use <leader>n to switch buffer
    let g:airline#extensions#tabline#buffer_idx_mode = 1

    " if airline_tab type is tab
    " convient to use <leader>n to switch tap
    let g:airline#extensions#tabline#tab_nr_type = 1

    " disable show split information on top right
    let g:airline#extensions#tabline#show_splits = 0

    nmap <leader>1 <Plug>AirlineSelectTab1
    nmap <leader>2 <Plug>AirlineSelectTab2
    nmap <leader>3 <Plug>AirlineSelectTab3
    nmap <leader>4 <Plug>AirlineSelectTab4
    nmap <leader>5 <Plug>AirlineSelectTab5
    nmap <leader>6 <Plug>AirlineSelectTab6
    nmap <leader>7 <Plug>AirlineSelectTab7
    nmap <leader>8 <Plug>AirlineSelectTab8
    nmap <leader>9 <Plug>AirlineSelectTab9
'''
[[plugins]]
repo = 'vim-airline/vim-airline-themes'
# }}}

# tcomment_vim (comment) {{{
[[plugins]]
repo = 'tomtom/tcomment_vim'
# }}}

# vim-cursorword (underline the word under the cursor) {{{
[[plugins]]
repo = 'itchyny/vim-cursorword'
# }}}

# vim-indent-guides (display indentions levels) {{{
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
    let g:indent_guides_enable_on_vim_startup = 1
    let g:indent_guides_exclude_filetypes = ['help', 'nerdtree', 'defx', 'diff']
'''
# }}}

#  vim-better-whitespace {{{
[[plugins]]
repo = 'ntpeters/vim-better-whitespace'
on_cmd = ['ToggleWhitespace', 'StripWhitespace']
hook_add = '''
    let g:better_whitespace_enabled = 1
    let g:better_whitespace_ctermcolor='3'
    let g:better_whitespace_guicolor = '#c8e6c9'
    let g:better_whitespace_filetypes_blacklist = ['defx', 'help', 'qf', 'diff']
    nnoremap <F5> :ToggleWhitespace<cr>
    " <S-F5> for stripping white space
    nnoremap <F17> :StripWhitespace<cr>
'''
# }}}

# rainbow (rainbow parenthethese) {{{
[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = '''
    let g:rainbow_active = 1
'''
# }}}

# vim dispatch (async build and test) {{{
[[plugins]]
repo = 'tpope/vim-dispatch'
# }}}

# gen_tags (ctags/gtags) {{{
[[plugins]]
repo = 'jsfaint/gen_tags.vim'
# gen_tags support deoplete source
hook_add = '''
    let  g:gen_tags#gtags_default_map = 1
'''
# }}}

# vim-unimpaired (pairs of handy bracket mappings) {{{
[[plugins]]
repo = 'tpope/vim-unimpaired'
# }}}

# ale (async lint engine) {{{
[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
    let g:ale_completion_enabled = 0
    let g:ale_fix_on_save = 0
    let g:ale_linters = {
                \   'python': ['flake8'],
                \   'rust': ['rustc', 'cargo'],
                \   'vim':['vint'],
                \   'php':['phpcs'],
                \   'sh': ['shellcheck']
                \}
    let g:ale_set_loclist = 1
    let g:ale_set_quickfix = 0

    let g:ale_php_cs_fixer_executable = 'php-cs-fixer'
'''
# }}}

# vim-surround (delte change and add surroundings) {{{
[[plugins]]
repo = 'tpope/vim-surround'
# }}}

# cpsm matcher {{{
[[plugins]]
repo = 'nixprime/cpsm'
build = 'sh -c "PY3=ON ./install.sh"'
# }}}

# context_filetype (context filetype library for Vim script) {{{
[[plugins]]
repo = 'Shougo/context_filetype.vim'
# }}}

# vim-precious (auto change filetype in code block) {{{
[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']
hook_add = '''
    let g:precious_enable_switchers = {'*': {'setfiletype': 1}, 'defx': {'setfiletype': 0}}
'''
# }}}

# vim text objecy {{{

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'glts/vim-textobj-comment'

# }}}

[[plugins]]
repo = 'tpope/vim-obsession'
hook_source = '''
    autocmd VimEnter * :Obsession
'''

# " vim: set foldmethod=marker tw=80 sw=4 ts=4 sts =4 sta nowrap et :
