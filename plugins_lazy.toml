# language setting {{{
# all {{{
[[plugins]]
repo = 'Shougo/neco-syntax'
on_source = 'deoplete.nvim'
# }}}
# golang {{{
[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
build = 'GoInstallBinaries'
hook_add = '''
    let g:go_metalinter_command = "golangci-lint"
    let g:go_metalinter_autosave_enabled = ['vet', 'errcheck']
    let g:go_metalinter_autosave = 1

    let g:go_echo_go_info = 0
    let g:go_auto_type_info = 1
    let g:go_auto_sameids = 1
    let g:go_fmt_command = "goimports"
    autocmd FileType go nnoremap <F16> :GoTest<cr>
    autocmd FileType go nnoremap <F17> :GoBuild<cr>
    autocmd FileType go nnoremap <F18> :GoRun<cr>
'''
# }}}
# python {{{
[[plugins]]
repo = 'zchee/deoplete-jedi'
depends = ['deoplete.nvim']
on_ft = 'python'

[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = 'python'
hook_add = '''
    let g:jedi#completions_enabled = 0
'''

# }}}
# php {{{
[[plugins]]
repo = 'StanAngeloff/php.vim'
on_ft = 'php'

[[plugins]]
repo = 'phpactor/phpactor'
build = 'composer install'
on_ft = 'php'

[[plugins]]
repo = 'kristijanhusak/deoplete-phpactor'
depends = ['deoplete.nvim']
on_ft = 'php'
# }}}
# toml {{{
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'
# }}}
# vim {{{
[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = 'vim'
# }}}
# rust {{{
[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'
hook_source = '''
    let $RUST_SRC_PATH =
                \ system('echo -n "$(rustc --print sysroot)"').
                \ "/lib/rustlib/src/rust/src"
'''

[[plugins]]
repo = 'racer-rust/vim-racer'
on_ft = 'rust'
hook_add = '''
    set hidden

    let g:racer_cmd = system('echo -n "$(which racer)"')
    let g:racer_experimental_completer = 1
'''
hook_source = '''
    au FileType rust nmap gd <Plug>(rust-def)
    au FileType rust nmap gs <Plug>(rust-def-split)
    au FileType rust nmap gx <Plug>(rust-def-vertical)
    au FileType rust nmap <leader>gd <Plug>(rust-doc)
'''
# }}}
# javascript {{{
[[plugins]]
repo = 'othree/jspc.vim'
on_ft = 'javascript'

[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = 'javascript'

[[plugins]]
repo = 'carlitux/deoplete-ternjs'
on_ft = 'javascript'
# }}}
# c {{{
[[plugins]]
repo = 'justinmk/vim-syntax-extra'
on_ft = ['c', 'lex', 'yacc']
# }}}
# html {{{
[[plugins]]
repo = 'othree/xml.vim'
on_ft = ['html', 'xml']

[[plugins]]
repo = 'AndrewRadev/tagalong.vim'
on_ft = 'html'
on_cmd = 'TagalongInit'

# }}}
# }}}

# ale (async lint engine) {{{
[[plugins]]
repo = 'w0rp/ale'
on_cmd = 'ALEToggle'
hook_add = '''
    noremap <F7> :ALEToggle<cr>
    let g:ale_enabled = 0
    let g:ale_completion_enabled = 0
    let g:ale_fix_on_save = 0
    let g:ale_linters = {
                \   'python': ['flake8'],
                \   'rust': ['rustc', 'cargo'],
                \   'vim':['vint'],
                \   'php':['phpcs'],
                \   'sh': ['shellcheck'],
                \   'go': ['gobuild']
                \}
    " let g:ale_set_loclist = 1
    let g:ale_set_quickfix = 1

    let g:ale_php_cs_fixer_executable = 'php-cs-fixer'
'''
# }}}

# apathy {{{
[[plugins]]
repo = 'tpope/vim-apathy'
on_ft = ['c', 'go']
# }}}

# vim-sayonara (sane buffer/window deletion) {{{
[[plugins]]
repo = 'mhinz/vim-sayonara'
on_cmd = 'Sayonara'
hook_add = '''
    let g:sayonara_filetypes = {
                \ 'defx': 'call defx#call_action("quit")',
                \ 'tagbar': 'TagbarClose'
                \ }
    nnoremap <silent> <leader>c :Sayonara!<CR>
    nnoremap <silent> <leader>q :Sayonara<CR>
'''
# }}}

# Gina {{{
[[plugins]]
repo = 'lambdalisue/gina.vim'
on_cmd = 'Gina'
hook_source = '''
    exe 'source' $NVIMRC.'/config/gina.vim'
    nmap dp <Plug>(gina-diffput)
    nmap do <Plug>(gina-diffget)
'''
# }}}

# vim-scriptease {{{
[[plugins]]
repo = 'tpope/vim-scriptease'
on_ft = 'vim'
# }}}

# Defx {{{
[[plugins]]
repo = 'Shougo/defx.nvim'
on_cmd = 'Defx'
hook_source = "exe 'source' $NVIMRC.'/config/defx.vim'"
hook_add = '''
    autocmd MyAutoCmd BufLeave,BufWinLeave  \[defx\]* call defx#call_action('add_session')
    autocmd MyAutoCmd FileType defx call MyDefxKeySetup()
    nnoremap <silent><F4> :<C-u>Defx -session-file='/tmp/defx_session' -buffer-name="defx"<CR>
'''

[[plugins]]
repo = 'kristijanhusak/defx-git'
on_source = ['defx.nvim']
hook_add = '''
    nnoremap <buffer><silent> [c <Plug>(defx-git-prev)
    nnoremap <buffer><silent> ]c <Plug>(defx-git-next)
'''
hook_source = '''
    call defx#custom#column('git', 'raw_mode', 1)
    call defx#custom#column('git', 'max_indicator_width', 2)
'''
# }}}

# tagbar (display tags in window) {{{
[[plugins]]
repo = 'majutsushi/tagbar'
on_cmd = 'TagbarToggle'
hook_add = '''
    let g:tagbar_ctags_bin = system('echo -n "$(which ctags)"')
    noremap <F8> :TagbarToggle<cr>
    filetype plugin indent on
    syntax enable
    let g:tagbar_type_go = {
	\ 'ctagstype' : 'go',
	\ 'kinds'     : [
		\ 'p:package',
		\ 'i:imports:1',
		\ 'c:constants',
		\ 'v:variables',
		\ 't:types',
		\ 'n:interfaces',
		\ 'w:fields',
		\ 'e:embedded',
		\ 'm:methods',
		\ 'r:constructor',
		\ 'f:functions'
	\ ],
	\ 'sro' : '.',
	\ 'kind2scope' : {
		\ 't' : 'ctype',
		\ 'n' : 'ntype'
	\ },
	\ 'scope2kind' : {
		\ 'ctype' : 't',
		\ 'ntype' : 'n'
	\ },
	\ 'ctagsbin'  : 'gotags',
	\ 'ctagsargs' : '-sort -silent'
\ }
'''
# }}}

# auto-pairs {{{
[[plugins]]
repo = 'cohama/lexima.vim'
on_event = 'InsertEnter'
# }}}

# linux coding style {{{
[[plugins]]
repo = 'vivien/vim-linux-coding-style'
on_cmd = 'LinuxCodingStyle'
# }}}

# vim-autoformat (code formatter) {{{
[[plugins]]
repo = 'Chiel92/vim-autoformat'
on_cmd = 'Autoformat'
hook_add = '''
    noremap <F3> :Autoformat<cr>
    let g:formatters_python = ['autopep8']
    let g:formatters_rust = ['rustfmt']
'''
# }}}

# undo tree {{{
repo = 'mbbill/undotree'
on_cmd = 'UndotreeToggle'
hook_add = '''
    nnoremap <F6> :UndotreeToggle<cr>
'''
# }}}

# vim-sinify (show git diff and stages/undoes hunks) {{{
[[plugins]]
repo = 'mhinz/vim-signify'
on_if = "isdirectory(getcwd().'/.git/')" # has .git folder
hook_add = '''
    xmap ic <plug>(signify-motion-inner-visual)
    nmap [c <plug>(signify-next-hunk)
    nmap ]c <plug>(signify-prev-hunk)
    omap ic <plug>(signify-motion-inner-pending)
    omap ac <plug>(signify-motion-outer-pending)
    xmap ac <plug>(signify-motion-outer-visual)
'''
# }}}

# neosnippet (snippet) {{{
[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets']
on_event = 'InsertCharPre'
on_ft = 'snippet'
hook_source = '''
    let g:neosnippet#enable_snipmate_compatibility = 1
    let g:neosnippet#enable_completed_snippet = 1
    let g:neosnippet#expand_word_boundary = 1
	let g:neosnippet#enable_complete_done = 1
    " let g:snippets_dir = '~/.vim/snippets/,~/.vim/bundle/snipmate/snippets/'
    let g:neosnippet#snippets_directory = expand('~/.config/config/dein/repos/github.com/Shougo/neosnippet-snippets/neosnippets')
'''
# }}}

# deoplete (autocomplete) {{{
[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_event = 'InsertEnter'
hook_source = '''
    exe 'source' $NVIMRC.'/config/deoplete.vim'
    call deoplete#enable()
'''
# }}}

# deoplete-tag (tag source for deoplete) {{{
[[plugins]]
repo = 'deoplete-plugins/deoplete-tag'
on_source = 'deoplete.nvim'
# }}}

# float-preview (preview for deopelte candidates) {{{
[[plugins]]
repo = 'ncm2/float-preview.nvim'
on_source = 'deoplete.nvim'
hook_source = '''
  let g:float_preview#docked = 0
'''
# }}}

# denite {{{
[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
hook_source = "exe 'source' $NVIMRC.'/config/denite.vim'"
hook_add = '''
    noremap [denite-leader] <Nop>
    nmap ; [denite-leader]

    autocmd FileType denite call MyDeniteKeySetup()

    " file mru
    nnoremap <silent> [denite-leader]fu :<C-u>Denite -start-filter file_mru<CR>

    " list all buffer
    nnoremap <silent> [denite-leader]b :<C-u>Denite buffer<CR>

    " search in this file (create buffer name called search)
    nnoremap <silent> [denite-leader]/ :<C-u>Denite -auto-resize -start-filter line<CR>

    " search globally - search recursively from project root (auto-preview is slowly)
    nnoremap <silent> [denite-leader]g/ :<C-u>Denite -buffer-name=search grep<CR>

    " search current word in the file
    nnoremap <silent> [denite-leader]cr :<C-u>DeniteCursorWord line<CR><C-R><C-W><CR>
    " search current word globally
    nnoremap <silent> [denite-leader]gc :<C-u>DeniteCursorWord -buffer-name=search grep<CR><C-R><C-W><CR>

    " list register
    nnoremap <silent> [denite-leader]r
                \ :<C-u>Denite -buffer-name=register
                \ neoyank register<CR>
    xnoremap <silent> [denite-leader]r
                \ :<C-u>Denite -default-action=replace -buffer-name=register
                \ neoyank register<CR>
'''
#  file mru source {{{
[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = 'denite.nvim'
# }}}

# neoyank source {{{
[[plugins]]
repo = 'Shougo/neoyank.vim'
on_source = 'denite.nvim'

# }}}
# }}}

# vim-asterisk (star improved) {{{
[[plugins]]
repo = 'haya14busa/vim-asterisk'
on_map = '<Plug>(asterisk-'

[[plugins]]
repo = 'haya14busa/is.vim'
on_map = '<Plug>(is-'
hook_add = '''
    let g:asterisk#keeppos = 1
    map *  <Plug>(asterisk-z*)<Plug>(is-nohl-1)
    map #  <Plug>(asterisk-z#)<Plug>(is-nohl-1)
    map g* <Plug>(asterisk-gz*)<Plug>(is-nohl-1)
    map g# <Plug>(asterisk-gz#)<Plug>(is-nohl-1)
'''

[[plugins]]
repo = 'osyo-manga/vim-anzu'
on_map = '<Plug>(anzu-'
hook_add = '''
    map n <Plug>(is-nohl)<Plug>(anzu-n-with-echo)zzzv
    map N <Plug>(is-nohl)<Plug>(anzu-N-with-echo)zzzv
    " nmap n <Plug>(anzu-mode-n)
    " nmap N <Plug>(anzu-mode-N)
'''
# }}}

# vim-exapnd-region {{{
[[plugins]]
repo = 'terryma/vim-expand-region'
on_map = '<Plug>(expand_region_'
hook_add = '''
    map J <Plug>(expand_region_expand)
    map K <Plug>(expand_region_shrink)
'''
# }}}

#  vim-better-whitespace {{{
[[plugins]]
repo = 'ntpeters/vim-better-whitespace'
on_cmd = ['ToggleWhitespace', 'StripWhitespace', 'EnableWhitespace']
hook_add = '''
    let g:better_whitespace_ctermcolor='3'
    let g:better_whitespace_guicolor = '#c8e6c9'
    let g:better_whitespace_filetypes_blacklist = ['defx', 'help', 'qf', 'diff']
    nnoremap <silent><expr><F5> exists("g:better_whitespace_enabled") ? ':ToggleWhitespace<cr>' : ':EnableWhitespace<cr>'
    " <S-F5> for stripping white space
    nnoremap <F17> :StripWhitespace<cr>
'''
# }}}

# cscope in quickfixwindow {{{
[[plugins]]
repo = 'ronakg/quickr-cscope.vim'
on_cmd = ['cs', 'cscope']
hook_add = '''
    let g:quickr_cscope_keymaps = 0
    nmap <C-s>s <plug>(quickr_cscope_symbols)
    nmap <C-s>g <plug>(quickr_cscope_global)
    nmap <C-s>c <plug>(quickr_cscope_callers)
    nmap <C-s>f <plug>(quickr_cscope_files)
    nmap <C-s>i <plug>(quickr_cscope_includes)
    nmap <C-s>t <plug>(quickr_cscope_text)
    nmap <C-s>e <plug>(quickr_cscope_egrep)
    nmap <C-s>d <plug>(quickr_cscope_functions)
'''
# }}}

#  tabnine deoplete source {{{
[[plugins]]
repo = 'tbodt/deoplete-tabnine'
build = './install.sh'
on_source = 'deoplete.nvim'
# }}}

# rtf highlight {{{
[[plugins]]
repo = 'dharanasoft/rtf-highlight'
on_cmd = 'RTFHighlight'
# }}}

# focus programming {{{
[[plugins]]
repo = 'junegunn/goyo.vim'
on_cmd = ['Goyo', 'Goyo!']
hook_add = '''
    " Goyo toggle
    noremap <silent><expr> <F2> exists('#goyo') ? ':Goyo!<cr>':':Goyo<cr>'
'''

[[plugins]]
repo = 'junegunn/limelight.vim'
on_cmd = ['Limelight', 'Limelight!']
on_map = '<Plug>(Limelight)'
hook_add = '''
    " <S-F2> Limeligh toggle
    noremap <silent><expr> <F14> !exists('#goyo') ? ''
                \ : exists('#limelight') ? ':Limelight!<cr>'
                \ : ':Limelight<cr>'
    autocmd! User GoyoLeave Limelight!
'''
# }}}

# vim-commentary {{{
[[plugins]]
repo = 'tpope/vim-commentary'
on_map = ['<Plug>Commentary', '<Plug>CommentaryLine']
on_cmd = 'Commentary'
hook_add = '''
    xmap gc  <Plug>Commentary
    nmap gc  <Plug>Commentary
    omap gc  <Plug>Commentary
    nmap gcc <Plug>CommentaryLine

    autocmd FileType toml setlocal commentstring=#\ %s
    autocmd FileType vim setlocal commentstring=\"\ %s
    autocmd FileType html setlocal commentstring=\"\ %s
'''
# }}}

# highlight text yank {{{
[[plugins]]
repo = 'machakann/vim-highlightedyank'
on_event = 'TextYankPost'
hook_add = '''
    let g:highlightedyank_highlight_duration = 400
'''
# }}}

# dein-command {{{
[[plugins]]
repo = 'haya14busa/dein-command.vim'
on_cmd = 'Dein'
# }}}

# qfreplace {{{
repo = 'thinca/vim-qfreplace'
on_cmd = 'Qfreplace'
# }}}

[[plugins]]
repo  = 'easymotion/vim-easymotion'
on_map = '<Plug>(easymotion-'
hook_add = '''
map  f <Plug>(easymotion-bd-f)
nmap f <Plug>(easymotion-overwin-f)

map  w <Plug>(easymotion-bd-w)
nmap w <Plug>(easymotion-overwin-w)
'''

# " vim: set foldmethod=marker tw=80 sw=4 ts=4 sts =4 sta nowrap et :
