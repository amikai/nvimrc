[[plugins]]
repo = 'mhinz/vim-sayonara'
on_cmd = 'Sayonara'
hook_add = '''
    nnoremap <silent> <leader>c :Sayonara!<CR>
    nnoremap <silent> <leader>q :Sayonara<CR>
'''

[[plugins]]
repo = 'lambdalisue/gina.vim'
on_path = 'gina://' 

[[plugins]]
repo = 'scrooloose/nerdtree'
on_cmd = 'NERDTreeToggle'
hook_add =  '''
    noremap <F5> :NERDTreeToggle<cr>
    " Open file navigator by default
    
    let NERDTreeMinimalUI = 1
    let NERDTreeDirArrows = 1
'''

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'
depends = ['nerdtree']

[[plugins]]
repo = 'majutsushi/tagbar'	
on_cmd = 'TagbarToggle' 
hook_add = '''
    noremap <F8> :TagbarToggle<cr>

    filetype plugin indent on
    syntax enable
'''

[[plugins]]
repo = 'Chiel92/vim-autoformat'
on_cmd = 'Autoformat'

[[plugins]]
repo = 'vivien/vim-linux-coding-style'
on_cmd = 'LinuxCodingStyle'

[[plugins]]
repo = 'jiangmiao/auto-pairs'
on_event = 'InsertEnter'
hook_add = '''
    let g:AutoPairsFlyMode = 1
'''

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = 'vim'


[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_event = 'InsertEnter'
hook_add = '''
    let g:deoplete#enable_at_startup = 1
'''
hook_source = '''
    inoremap <expr><cr> (pumvisible() ? deoplete#close_popup() : "\<cr>")
    " <S-TAB>: completion back.
    inoremap <expr><C-g>       deoplete#refresh()
    inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"
    inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ deoplete#manual_complete()
    function! s:check_back_space() abort
      let col = col('.') - 1
      return !col || getline('.')[col - 1]  =~ '\s'
    endfunction

    call deoplete#custom#option({
    \ 'auto_complete_delay': 200,
    \ 'ignore_case': v:false,
    \ 'auto_complete': v:false,
    \ })

    " Disable the candidates in Comment/String syntaxes.
    call deoplete#custom#source('_',
    \ 'disabled_syntaxes', ['Comment', 'String'])

    " Use mathcer_head instead of fuzzy
    call deoplete#custom#source('_', 'matchers', ['matcher_head'])

    call deoplete#custom#option('sources', {
    \ '_': ['buffer'],
    \ 'c': ['buffer', 'tag', 'member'],
    \ 'java': ['buffer', 'javacomplete2', 'member'],
    \ 'vim': ['vim','buffer'],
    \ 'rust': ['racer', 'buffer', 'member']
    \})
 
    " Change the source mark
    call deoplete#custom#source('buffer', 'mark', 'buf')
    call deoplete#custom#source('tag', 'mark', 'tag')
    call deoplete#custom#source('member', 'mark', 'mem')
    call deoplete#custom#source('javacomplete2', 'mark', 'jc')

    let g:deoplete#omni#input_patterns = get(g:,'deoplete#omni#input_patterns',{})
    let g:deoplete#omni#input_patterns.java = [
        \'[^. \t0-9]\.\w*',
        \'[^. \t0-9]\->\w*',
        \'[^. \t0-9]\::\w*',
        \]
'''

[[plugins]]
repo = 'tenfyzhong/CompleteParameter.vim'
depends = ['deoplete.nvim']

[[plugins]]
repo = 'simnalamburt/vim-mundo'
on_cmd = 'MundoToggle'
hook_add = '''
    noremap <F6> :MundoToggle<cr>
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
    noremap [denite-leader] <Nop>
    nmap ; [denite-leader]
    
    " TODO: Denite outline and ctags setting
    "
    " ctrlp
    nnoremap <silent> <C-p> :<C-u>Denite -mode=normal file_rec<CR>
    
    " list all buffer
    nnoremap <silent> [denite-leader]b :<C-u>Denite -mode=normal buffer<CR>
    
    " 
    nnoremap <silent> [denite-leader]r :<C-u>Denite -buffer-name=search -resume -mode=normal<CR>
    
    " search in this file (create buffer name called search)
    nnoremap <silent> [denite-leader]/ :<C-u>Denite -buffer-name=search -auto-highlight  -auto-resize line<CR>
    " search globally - search recursively from project root (auto-preview is slowly)
    nnoremap <silent> [denite-leader]g/ :<C-u>Denite -buffer-name=search -mode=normal grep<CR>
    " search current word in the file
    nnoremap <silent> [denite-leader]cr :<C-u>DeniteCursorWord  -mode=normal -buffer-name=search -auto-highlight line<CR><C-R><C-W><CR>
    " search current word globally 
    nnoremap <silent> [denite-leader]gc :<C-u>DeniteCursorWord  -mode=normal -buffer-name=search grep<CR><C-R><C-W><CR>
    " make the buffer named search not quit after the action is excuted
'''
hook_source = '''
    call denite#custom#option('_', {
        \ 'prompt': 'Î»:',
        \ 'winheight': 10,
        \ 'updatetime': 1,
        \ 'auto_resize': 1,
        \ 'source_names': 'short',
        \ 'empty': 0,
        \ 'auto-accel': 1,
        \})
    "   'vertical_preview': 1, " use it when needed
    
    
    
    call denite#custom#option('search', {
        \ 'quit': 0,
        \})
    
    " denite-key mapping
    call denite#custom#map('insert', 'jk', '<denite:enter_mode:normal>')
    call denite#custom#map('insert', "<C-j>", '<denite:move_to_next_line>')
    call denite#custom#map('insert', "<C-k>", '<denite:move_to_previous_line>')
    
    call denite#custom#map('insert', "<C-t>", '<denite:do_action:tabopen>')
    call denite#custom#map('insert', "<C-v>", '<denite:do_action:vsplit>')
    call denite#custom#map('normal', "vs", '<denite:do_action:vsplit>')
    call denite#custom#map('normal', "sp", '<denite:do_action:split>')
    call denite#custom#map('normal', "<C-h>", '<denite:wincmd:h>')
    call denite#custom#map('normal', "<C-j>", '<denite:wincmd:j>')
    call denite#custom#map('normal', "<C-k>", '<denite:wincmd:k>')
    call denite#custom#map('normal', "<C-l>", '<denite:wincmd:l>')
    " customize ignore globs
    call denite#custom#source('grep', 'matchers', ['matcher_ignore_globs'])
    call denite#custom#source('line', 'matchers', ['matcher_ignore_globs', 'matcher_regexp'])
    call denite#custom#source('file_rec', 'matchers', ['matcher_fuzzy','matcher_ignore_globs'])
    
    call denite#custom#filter('matcher_ignore_globs', 'ignore_globs',
          \ [
          \ '.git/', 'build/', '__pycache__/',
          \ 'images/', '*.o', '*.make',
          \ '*.min.*',
          \ 'img/', 'fonts/',
          \ 'tags', 'cscope*'])
    
'''

[[plugins]]
repo = 'tpope/vim-scriptease'
on_ft = 'vim'

[[plugins]]
repo = 'racer-rust/vim-racer'
on_ft = 'rust'
hook_add = '''
    set hidden

    let g:racer_cmd = "/Users/amikai/.cargo/bin/racer"
    let g:racer_experimental_completer = 1
'''
#     let g:racer_cmd = system('echo -n "$(which racer)"')
hook_source = '''
    au FileType rust nmap gd <Plug>(rust-def)
    au FileType rust nmap gs <Plug>(rust-def-split)
    au FileType rust nmap gx <Plug>(rust-def-vertical)
    au FileType rust nmap <leader>gd <Plug>(rust-doc)
'''

