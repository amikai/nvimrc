# language setting {{{
# all {{{
[[plugins]]
repo = 'Shougo/neco-syntax'
on_source = 'deoplete.nvim'
# }}}
# golang {{{
[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'
# }}}
# python {{{
[[plugins]]
repo = 'zchee/deoplete-jedi'
depends = ['deoplete.nvim']
on_ft = 'python'
# }}}
# php {{{
[[plugins]]
repo = 'StanAngeloff/php.vim'
on_ft = 'php'

[[plugins]]
repo = 'phpactor/phpactor'
build = 'composer install'
on_ft = 'php'

[[plugins]]
repo = 'kristijanhusak/deoplete-phpactor'
depends = ['deoplete.nvim']
on_ft = 'php'
# }}}
# toml {{{
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'
# }}}
# vim {{{
[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = 'vim'
# }}}
# rust {{{
[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'
hook_source = '''
    let $RUST_SRC_PATH =
                \ system('echo -n "$(rustc --print sysroot)"').
                \ "/lib/rustlib/src/rust/src"
'''

[[plugins]]
repo = 'racer-rust/vim-racer'
on_ft = 'rust'
hook_add = '''
    set hidden

    let g:racer_cmd = system('echo -n "$(which racer)"')
    let g:racer_experimental_completer = 1
'''
hook_source = '''
    au FileType rust nmap gd <Plug>(rust-def)
    au FileType rust nmap gs <Plug>(rust-def-split)
    au FileType rust nmap gx <Plug>(rust-def-vertical)
    au FileType rust nmap <leader>gd <Plug>(rust-doc)
'''
# }}}
# javascript {{{
[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = 'javascript'
# }}}
# c {{{
[[plugins]]
repo = 'justinmk/vim-syntax-extra'
on_ft = ['c', 'lex', 'yacc']
# }}}
# html {{{
[[plugins]]
repo = 'othree/xml.vim'
on_ft = ['html', 'xml']
# }}}
# diff {{{
[[plugins]]
repo = 'sgeb/vim-diff-fold'
on_ft = ['diff']
# }}}
# }}}

# apathy {{{
[[plugins]]
repo = 'tpope/vim-apathy'
on_ft = ['c', 'go']
# }}}

# vim-sayonara (sane buffer/window deletion) {{{
[[plugins]]
repo = 'mhinz/vim-sayonara'
on_cmd = 'Sayonara'
hook_add = '''
    nnoremap <silent> <leader>c :Sayonara!<CR>
    nnoremap <silent> <leader>q :Sayonara<CR>
'''
# }}}

# Gina {{{
[[plugins]]
repo = 'lambdalisue/gina.vim'
on_cmd = 'Gina'
hook_source = '''
    exe 'source' $nvimrc.'/config/gina.vim'
'''
# }}}

# vim-scriptease {{{
[[plugins]]
repo = 'tpope/vim-scriptease'
on_ft = 'vim'
# }}}

# matchit (% enhancement) {{{
[[plugins]]
repo = 'vim-scripts/matchit.zip'
on_ft = ['html', 'vim', 'xml']
# }}}

# nerdtree (file explorer) {{{
[[plugins]]
repo = 'scrooloose/nerdtree'
on_cmd = 'NERDTreeToggle'
hook_add = '''
    noremap <F5> :NERDTreeToggle<cr>
    " Open file navigator by default
    
    let NERDTreeMinimalUI = 1
    let NERDTreeDirArrows = 1
'''
# }}}

# Defx {{{
[[plugins]]
repo = 'Shougo/defx.nvim'
on_cmd = 'Defx'
hook_source = "exe 'source' $nvimrc.'/config/defx.vim'"
hook_add = '''
    nnoremap <silent><F4>  :<C-u>Defx<CR>
'''

[plugins.ftplugin]
defx = '''

    nnoremap <silent><buffer><expr> <CR>
    \ defx#is_directory() ?
    \ defx#do_action('open_or_close_tree') :
    \ defx#do_action('drop')

    nnoremap <silent><buffer><expr> o
    \ defx#is_opened_tree() ?
    \ defx#do_action('close_tree') :
    \ defx#do_action('open_tree')

    nnoremap <silent><buffer><expr> O
    \ defx#is_opened_tree() ?
    \ defx#do_action('close_tree') :
    \ defx#async_action('open_tree_recursive')

    nnoremap <silent><buffer><expr> R defx#do_action('redraw')

    nnoremap <silent><buffer><expr> >
    \ defx#is_directory() ?
    \ defx#do_action('open') :
    \ "\<nop>"
    nnoremap <silent><buffer><expr> < defx#do_action('cd', ['..'])

    " back to current directory
    nnoremap <silent><buffer><expr> ~ defx#do_action('cd', [getcwd()])

    " change current work directory
    nnoremap <buffer> cd :call defx#call_action('change_vim_cwd')<CR>
    \ :echo "Defx: CWD is now: ".getcwd()<CR>

    nnoremap <silent><buffer><expr> I defx#do_action('toggle_ignored_files')
    nnoremap <silent><buffer><expr> <Space> defx#do_action('toggle_select') . 'j'

    nnoremap <silent><buffer><expr> j line('.') == line('$') ? 'gg' : 'j'
    nnoremap <silent><buffer><expr> k line('.') == 1 ? 'G' : 'k'
    nnoremap <silent><buffer><expr> p defx#do_action('paste')
    nnoremap <silent><buffer><expr> dd defx#do_action('move')
    nnoremap <silent><buffer><expr> yy defx#do_action('copy')
    nnoremap <silent><buffer><expr> q defx#do_action('quit')
    nnoremap <silent><buffer><expr> gh defx#do_action('cd', [getcwd()])
    nnoremap <silent><buffer><expr> ! defx#do_action('execute_command')
    nnoremap <silent><buffer>m :call DefxContextMenu()<CR>
'''

[[plugins]]
repo = 'kristijanhusak/defx-git'
on_source = ['defx.nvim']
hook_add = '''
    nnoremap <buffer><silent> [c <Plug>(defx-git-prev)
    nnoremap <buffer><silent> ]c <Plug>(defx-git-next)
    let g:defx_git#raw_mode = 1
    let g:defx_git#column_length = 1
    let g:defx_git#show_ignored = 0
'''
# }}}

# tagbar (display tags in window) {{{
[[plugins]]
repo = 'majutsushi/tagbar'	
on_cmd = 'TagbarToggle' 
hook_add = '''
    noremap <F8> :TagbarToggle<cr>
    filetype plugin indent on
    syntax enable
'''
# }}}

# auto-pairs {{{
[[plugins]]
repo = 'cohama/lexima.vim'
on_event = 'InsertEnter'
hook_add = '''
'''
# }}}

# linux coding style {{{
[[plugins]]
repo = 'vivien/vim-linux-coding-style'
on_cmd = 'LinuxCodingStyle'
# }}}

# vim-autoformat (code formatter) {{{
[[plugins]]
repo = 'Chiel92/vim-autoformat'
on_cmd = 'Autoformat'
hook_add = '''
    noremap <F3> :Autoformat<cr>
    let g:formatters_python = ['autopep8']
    let g:formatters_rust = ['rustfmt']
'''
# }}}

# vim-mundo (undo tree) {{{
[[plugins]]
repo = 'simnalamburt/vim-mundo'
on_cmd = 'MundoToggle'
hook_add = '''
    noremap <F6> :MundoToggle<cr>
'''
# }}}

# vim-gitgutter (show git diff and stages/undoes hunks) {{{
[[plugins]]
repo = 'airblade/vim-gitgutter'
on_if = "isdirectory(getcwd().'/.git/')" # has .git folder
# }}}

# neosnippet (snippet) {{{
[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets']
on_event = 'InsertCharPre'
on_ft = 'snippet'
hook_source = '''
  let g:neosnippet#enable_snipmate_compatibility = 1
  let g:neosnippet#enable_completed_snippet = 1
  let g:neosnippet#expand_word_boundary = 1
  " let g:snippets_dir = '~/.vim/snippets/,~/.vim/bundle/snipmate/snippets/'
  let g:neosnippet#snippets_directory = expand('~/.config/config/dein/repos/github.com/Shougo/neosnippet-snippets/neosnippets')
  autocmd MyAutoCmd CompleteDone * call neosnippet#complete_done()
'''
# }}}

# deoplete (autocomplete) {{{
[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_event = 'InsertEnter'
hook_source = '''
    exe 'source' $nvimrc.'/config/deoplete.vim'
    call deoplete#enable()
'''
# }}}

# deoplete-tag (tag source for deoplete) {{{
[[plugins]]
repo = 'deoplete-plugins/deoplete-tag'
on_source = 'deoplete.nvim'
# }}}

# denite {{{
[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
hook_source = "exe 'source' $nvimrc.'/config/denite.vim'"
hook_add = '''
    noremap [denite-leader] <Nop>
    nmap ; [denite-leader]
    
    " TODO: Denite outline and ctags setting

    " ctrlp
    nnoremap <silent> [denite-leader]f :<C-u>Denite -mode=normal file_rec<CR>

    " file mru
    nnoremap <silent> [denite-leader]fu :<C-u>Denite -mode=normal file_mru<CR>

    " list all buffer
    nnoremap <silent> [denite-leader]b :<C-u>Denite -mode=normal buffer<CR>
    
    " 
    nnoremap <silent> [denite-leader]r :<C-u>Denite -refresh -resume -mode=normal -buffer-name=search<CR>
    
    " search in this file (create buffer name called search)
    nnoremap <silent> [denite-leader]/ :<C-u>Denite -buffer-name=search -auto-highlight  -auto-resize line<CR>
    " search globally - search recursively from project root (auto-preview is slowly)
    nnoremap <silent> [denite-leader]g/ :<C-u>Denite -buffer-name=search -mode=normal grep<CR>
    " search current word in the file
    nnoremap <silent> [denite-leader]cr :<C-u>DeniteCursorWord  -mode=normal -buffer-name=search -auto-highlight line<CR><C-R><C-W><CR>
    " search current word globally 
    nnoremap <silent> [denite-leader]gc :<C-u>DeniteCursorWord  -mode=normal -buffer-name=search grep<CR><C-R><C-W><CR>
    " list register 
    nnoremap <silent> [denite-leader]re :<C-u>Denite -mode=normal -buffer-name=list_reg register<CR>
'''
#  file mru source {{{ 
[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = 'denite.nvim'
# }}}

# }}}

# vim-asterisk (star improved) {{{
[[plugins]]
repo = 'haya14busa/vim-asterisk'
on_map = '<Plug>(asterisk-'

[[plugins]]
repo = 'haya14busa/is.vim'
on_map = '<Plug>(is-'
hook_add = '''
let g:asterisk#keeppos = 1
map *  <Plug>(asterisk-z*)<Plug>(is-nohl-1)
map #  <Plug>(asterisk-z#)<Plug>(is-nohl-1)
map g* <Plug>(asterisk-gz*)<Plug>(is-nohl-1)
map g# <Plug>(asterisk-gz#)<Plug>(is-nohl-1)
'''

[[plugins]]
repo = 'osyo-manga/vim-anzu'
on_map = '<Plug>(anzu-'
hook_add = '''
map n <Plug>(is-nohl)<Plug>(anzu-n-with-echo)
map N <Plug>(is-nohl)<Plug>(anzu-N-with-echo)
" nmap n <Plug>(anzu-mode-n)
" nmap N <Plug>(anzu-mode-N)
'''
# }}}

# vim-yankstack (vim like kill ring) {{{
[[plugins]]
repo = 'maxbrunsfeld/vim-yankstack'
on_event = 'TextYankPost'
hook_source = '''
    let g:yankstack_map_keys = 0
    call yankstack#setup()
    let g:yankstack_yank_keys = ['y', 'd']
    nmap <leader>p <Plug>yankstack_substitute_older_paste
    nmap <leader>P <Plug>yankstack_substitute_newer_paste
'''
# }}}

# vim-exapnd-region {{{
[[plugins]]
repo = 'terryma/vim-expand-region'
on_map = '<Plug>(expand_region_'
hook_add = '''
    map J <Plug>(expand_region_expand)
    map K <Plug>(expand_region_shrink)
'''
# }}}

#  vim-better-whitespace {{{
[[plugins]]
repo = 'ntpeters/vim-better-whitespace'
on_cmd = 'ToggleWhitespace'
hook_add = '''
    noremap <F6> :ToggleWhitespace<cr>
'''
# }}}

# cscope in quickfixwindow {{{
[[plugins]]
repo = 'ronakg/quickr-cscope.vim'
on_cmd = ['cs', 'cscope']
hook_add = '''
    let g:quickr_cscope_keymaps = 0
    nmap <C-s>s <plug>(quickr_cscope_symbols)
    nmap <C-s>g <plug>(quickr_cscope_global)
    nmap <C-s>c <plug>(quickr_cscope_callers)
    nmap <C-s>f <plug>(quickr_cscope_files)
    nmap <C-s>i <plug>(quickr_cscope_includes)
    nmap <C-s>t <plug>(quickr_cscope_text)
    nmap <C-s>e <plug>(quickr_cscope_egrep)
    nmap <C-s>d <plug>(quickr_cscope_functions)
'''
# }}}

#  tabnine deoplete source {{{
[[plugins]]
repo = 'tbodt/deoplete-tabnine'
build = './install.sh'
on_source = 'deoplete.nvim'
# }}}

# rtf highlight {{{
[[plugins]]
repo = 'dharanasoft/rtf-highlight'
on_cmd = 'RTFHighlight'
# }}}


# " vim: set foldmethod=marker tw=80 sw=4 ts=4 sts =4 sta nowrap et :
